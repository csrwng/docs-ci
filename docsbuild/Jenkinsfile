#!/usr/bin/env groovy

// Parameters expected:
// gitref - github branch ref to build
// githubCommit - sha of GitHub commit that is being tested
// projectPrefix - prefix for new projects created

def project=""
def projectCreated=false
def appName="openshift-docs"
def previewGenerated=false
def repoUrl=githubRepositoryUrl

def setBuildStatus = { String context, String message, String state, String backref ->
     step([$class: "GitHubCommitStatusSetter",
           reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
           commitShaSource: [$class: "ManuallyEnteredShaSource", sha: "${githubCommit}"],
           contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
           statusBackrefSource: [$class: "ManuallyEnteredBackrefSource", backref: backref],
           statusResultSource: [$class: "ConditionalStatusResultSource",
                                results: [[$class: "AnyBuildResult",
                                           message: message,
                                           state: state ]]]])
}

openshift.withCluster() {
    try {
        node {
            stage("Checkout") {
                setBuildStatus("ci/preview", "Generating preview.", "PENDING", "${RUN_DISPLAY_URL}")
                setBuildStatus("ci/preview/docs", "Preview not available.", "PENDING", "")
                checkout scm
                checkout(changelog: false, poll: false, 
                  scm: [$class: 'GitSCM', 
                    branches: [
                      [name: gitref]
                    ], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [
                      [$class: 'RelativeTargetDirectory', relativeTargetDir: 'docs-repo']
                    ], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [
                      [
                        credentialsId: 'github_userpass', 
                        name: 'origin', 
                        refspec: '+refs/pull/*:refs/remotes/origin/pr/*', 
                        url: repoUrl,
                      ]
                    ]
                  ])
            }
            stage ("Create Project") {
                project="${projectPrefix}-${githubCommit.substring(0,7)}"
                openshift.newProject(project.toString())
                projectCreated=true
            }
            openshift.withProject(project.toString()) {
                stage("Set Project Permissions") {
                    openshift.raw('policy', 'add-role-to-group',  'view', 'system:authenticated')
                }
                
                stage ("Apply object configurations") {
                    objs = openshift.process(readFile("docs-repo/_openshift/docs-template.yaml"))
                    openshift.apply(objs)
                }
                
                stage ("Build") {
                    sh "cp -R docsbuild/overrides/* docsbuild/overrides/.s2i ./docs-repo"
                    def docbuild; 
                    docbuild=openshift.startBuild(appName, "--from-dir=docs-repo")
                    docbuild.logs('-f')
                }
                
                stage ("Verify Service") {
                    ep = openshift.selector("endpoints", appName)
                    timeout(5) {
                        ep.untilEach() {
                            return it.object().subsets.size() > 0
                        }
                    }
                }
                stage ("Preview Available") {
                    def route = openshift.selector("route", appName)
                    def hostName = route.object().spec.host
                    setBuildStatus("ci/preview", "Preview available.", "PENDING", "${RUN_DISPLAY_URL}")
                    setBuildStatus("ci/preview/docs", "Click on Details to see preview.", "SUCCESS", "http://${hostName}/index.html")
                    previewGenerated=true
                    timeout(time:2, unit:'DAYS') {
                        input(message: "Done with preview?", ok: "Done")
                    }
                }
            }
        }
    }
    finally {
        if (projectCreated) {
            node {
                stage('Cleanup') {
                    openshift.delete('project', project.toString())
                }
            }
        }
        if (previewGenerated) {
            setBuildStatus("ci/preview", "Done.", "SUCCESS", "")
            setBuildStatus("ci/preview/docs", "Done.", "SUCCESS", "")
        } else {
            setBuildStatus("ci/preview", "Failed to generate preview.", "FAILURE", "")
            setBuildStatus("ci/preview", "Preview not available.", "FAILURE", "")
        }
    }
}
